// <auto-generated />
using System;
using Infraestructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infraestructure.Migrations
{
    [DbContext(typeof(InkboardDbContext))]
    [Migration("20250120191835_CambioDeNombreDeTablaHiloInteraccion")]
    partial class CambioDeNombreDeTablaHiloInteraccion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Baneos.Baneo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Concluye")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("concluye");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Mensaje")
                        .HasColumnType("text")
                        .HasColumnName("mensaje");

                    b.Property<Guid>("ModeradorId")
                        .HasColumnType("uuid")
                        .HasColumnName("moderador_id");

                    b.Property<int>("Razon")
                        .HasColumnType("integer")
                        .HasColumnName("razon");

                    b.Property<Guid>("UsuarioBaneadoId")
                        .HasColumnType("uuid")
                        .HasColumnName("usuario_baneado_id");

                    b.HasKey("Id")
                        .HasName("pk_baneos");

                    b.HasIndex("ModeradorId")
                        .HasDatabaseName("ix_baneos_moderador_id");

                    b.HasIndex("UsuarioBaneadoId")
                        .HasDatabaseName("ix_baneos_usuario_baneado_id");

                    b.ToTable("baneos", (string)null);
                });

            modelBuilder.Entity("Domain.Categorias.Models.Categoria", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<bool>("OcultoPorDefecto")
                        .HasColumnType("boolean")
                        .HasColumnName("oculto_por_defecto");

                    b.HasKey("Id")
                        .HasName("pk_categorias");

                    b.ToTable("categorias", (string)null);
                });

            modelBuilder.Entity("Domain.Categorias.Models.Subcategoria", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CategoriaId")
                        .HasColumnType("uuid")
                        .HasColumnName("categoria_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<string>("NombreCorto")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre_corto");

                    b.HasKey("Id")
                        .HasName("pk_subcategorias");

                    b.HasIndex("CategoriaId")
                        .HasDatabaseName("ix_subcategorias_categoria_id");

                    b.ToTable("subcategorias", (string)null);
                });

            modelBuilder.Entity("Domain.Comentarios.Models.Comentario", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AutorId")
                        .HasColumnType("uuid")
                        .HasColumnName("autor_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("Dados")
                        .HasColumnType("integer")
                        .HasColumnName("dados");

                    b.Property<Guid>("HiloId")
                        .HasColumnType("uuid")
                        .HasColumnName("hilo_id");

                    b.Property<Guid?>("MediaId")
                        .HasColumnType("uuid")
                        .HasColumnName("media_id");

                    b.Property<bool>("RecibirNotificaciones")
                        .HasColumnType("boolean")
                        .HasColumnName("recibir_notificaciones");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tag");

                    b.Property<string>("TagUnico")
                        .HasColumnType("text")
                        .HasColumnName("tag_unico");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("texto");

                    b.HasKey("Id")
                        .HasName("pk_comentarios");

                    b.HasIndex("AutorId")
                        .HasDatabaseName("ix_comentarios_autor_id");

                    b.HasIndex("HiloId")
                        .HasDatabaseName("ix_comentarios_hilo_id");

                    b.HasIndex("MediaId")
                        .IsUnique()
                        .HasDatabaseName("ix_comentarios_media_id");

                    b.ToTable("comentarios", (string)null);
                });

            modelBuilder.Entity("Domain.Encuestas.Encuesta", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.HasKey("Id")
                        .HasName("pk_encuestas");

                    b.ToTable("encuestas", (string)null);
                });

            modelBuilder.Entity("Domain.Hilos.Models.Hilo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AutorId")
                        .HasColumnType("uuid")
                        .HasColumnName("autor_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<Guid?>("EncuestaId")
                        .HasColumnType("uuid")
                        .HasColumnName("encuesta_id");

                    b.Property<Guid>("PortadaId")
                        .HasColumnType("uuid")
                        .HasColumnName("portada_id");

                    b.Property<bool>("RecibirNotificaciones")
                        .HasColumnType("boolean")
                        .HasColumnName("recibir_notificaciones");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("SubcategoriaId")
                        .HasColumnType("uuid")
                        .HasColumnName("subcategoria_id");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("titulo");

                    b.Property<DateTime>("UltimoBump")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ultimo_bump");

                    b.HasKey("Id")
                        .HasName("pk_hilos");

                    b.HasIndex("AutorId")
                        .HasDatabaseName("ix_hilos_autor_id");

                    b.HasIndex("EncuestaId")
                        .IsUnique()
                        .HasDatabaseName("ix_hilos_encuesta_id");

                    b.HasIndex("PortadaId")
                        .IsUnique()
                        .HasDatabaseName("ix_hilos_portada_id");

                    b.HasIndex("SubcategoriaId")
                        .HasDatabaseName("ix_hilos_subcategoria_id");

                    b.ToTable("hilos", (string)null);
                });

            modelBuilder.Entity("Domain.Media.Models.HashedMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Filename")
                        .HasColumnType("text")
                        .HasColumnName("filename");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_medias");

                    b.HasIndex("Hash")
                        .IsUnique()
                        .HasDatabaseName("ix_medias_hash");

                    b.ToTable("medias", (string)null);
                });

            modelBuilder.Entity("Domain.Media.Models.MediaSpoileable", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("HashedMediaId")
                        .HasColumnType("uuid")
                        .HasColumnName("hashed_media_id");

                    b.Property<bool>("Spoiler")
                        .HasColumnType("boolean")
                        .HasColumnName("spoiler");

                    b.HasKey("Id")
                        .HasName("pk_medias_spoileables");

                    b.HasIndex("HashedMediaId")
                        .HasDatabaseName("ix_medias_spoileables_hashed_media_id");

                    b.ToTable("medias_spoileables", (string)null);
                });

            modelBuilder.Entity("Domain.Notificaciones.Notificacion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ComentarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("comentario_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("HiloId")
                        .HasColumnType("uuid")
                        .HasColumnName("hilo_id");

                    b.Property<bool>("Leida")
                        .HasColumnType("boolean")
                        .HasColumnName("leida");

                    b.Property<Guid>("NotificadoId")
                        .HasColumnType("uuid")
                        .HasColumnName("notificado_id");

                    b.Property<string>("tipo_de_interaccion")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)")
                        .HasColumnName("tipo_de_interaccion");

                    b.HasKey("Id")
                        .HasName("pk_notificaciones");

                    b.HasIndex("ComentarioId")
                        .HasDatabaseName("ix_notificaciones_comentario_id");

                    b.HasIndex("HiloId")
                        .HasDatabaseName("ix_notificaciones_hilo_id");

                    b.HasIndex("NotificadoId")
                        .HasDatabaseName("ix_notificaciones_notificado_id");

                    b.ToTable("notificaciones", (string)null);

                    b.HasDiscriminator<string>("tipo_de_interaccion").HasValue("Notificacion");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Usuarios.Models.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("ModeradorName")
                        .HasColumnType("text")
                        .HasColumnName("moderador_name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<DateTime>("RegistradoEn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registrado_en");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<Domain.Usuarios.Models.ValueObjects.IdentityId>", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<Domain.Usuarios.Models.ValueObjects.IdentityId>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<Domain.Usuarios.Models.ValueObjects.IdentityId>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<Domain.Usuarios.Models.ValueObjects.IdentityId>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<Domain.Usuarios.Models.ValueObjects.IdentityId>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<Domain.Usuarios.Models.ValueObjects.IdentityId>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Notificaciones.ComentarioRespondidoNotificacion", b =>
                {
                    b.HasBaseType("Domain.Notificaciones.Notificacion");

                    b.Property<Guid>("RespondidoId")
                        .HasColumnType("uuid")
                        .HasColumnName("respondido_id");

                    b.HasIndex("RespondidoId")
                        .HasDatabaseName("ix_notificaciones_respondido_id");

                    b.ToTable("notificaciones", (string)null);

                    b.HasDiscriminator().HasValue("ComentarioRespondido");
                });

            modelBuilder.Entity("Domain.Notificaciones.HiloComentadoNotificacion", b =>
                {
                    b.HasBaseType("Domain.Notificaciones.Notificacion");

                    b.ToTable("notificaciones", (string)null);

                    b.HasDiscriminator().HasValue("HiloComentado");
                });

            modelBuilder.Entity("Domain.Notificaciones.HiloSeguidoNotificacion", b =>
                {
                    b.HasBaseType("Domain.Notificaciones.Notificacion");

                    b.ToTable("notificaciones", (string)null);

                    b.HasDiscriminator().HasValue("HiloSeguido");
                });

            modelBuilder.Entity("Domain.Baneos.Baneo", b =>
                {
                    b.HasOne("Domain.Usuarios.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("ModeradorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_baneos_asp_net_users_moderador_id");

                    b.HasOne("Domain.Usuarios.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UsuarioBaneadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_baneos_asp_net_users_usuario_baneado_id");
                });

            modelBuilder.Entity("Domain.Categorias.Models.Subcategoria", b =>
                {
                    b.HasOne("Domain.Categorias.Models.Categoria", null)
                        .WithMany("Subcategorias")
                        .HasForeignKey("CategoriaId")
                        .HasConstraintName("fk_subcategorias_categorias_categoria_id");
                });

            modelBuilder.Entity("Domain.Comentarios.Models.Comentario", b =>
                {
                    b.HasOne("Domain.Usuarios.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comentarios_asp_net_users_autor_id");

                    b.HasOne("Domain.Hilos.Models.Hilo", null)
                        .WithMany("Comentarios")
                        .HasForeignKey("HiloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comentarios_hilos_hilo_id");

                    b.HasOne("Domain.Media.Models.MediaSpoileable", null)
                        .WithOne()
                        .HasForeignKey("Domain.Comentarios.Models.Comentario", "MediaId")
                        .HasConstraintName("fk_comentarios_medias_spoileables_media_id");

                    b.OwnsMany("Domain.Comentarios.Models.ComentarioInterracion", "Interaciones", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("ComentarioId")
                                .HasColumnType("uuid")
                                .HasColumnName("comentario_id");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_at");

                            b1.Property<bool>("Oculto")
                                .HasColumnType("boolean")
                                .HasColumnName("oculto");

                            b1.Property<Guid>("UsuarioId")
                                .HasColumnType("uuid")
                                .HasColumnName("usuario_id");

                            b1.HasKey("Id")
                                .HasName("pk_comentario_interracion");

                            b1.HasIndex("ComentarioId")
                                .HasDatabaseName("ix_comentario_interracion_comentario_id");

                            b1.HasIndex("UsuarioId")
                                .HasDatabaseName("ix_comentario_interracion_usuario_id");

                            b1.ToTable("comentario_interracion", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ComentarioId")
                                .HasConstraintName("fk_comentario_interracion_comentarios_comentario_id");

                            b1.HasOne("Domain.Usuarios.Models.Usuario", null)
                                .WithMany()
                                .HasForeignKey("UsuarioId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired()
                                .HasConstraintName("fk_comentario_interracion_asp_net_users_usuario_id");
                        });

                    b.OwnsMany("Domain.Comentarios.Models.DenunciaDeComentario", "Denuncias", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("ComentarioId")
                                .HasColumnType("uuid")
                                .HasColumnName("comentario_id");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_at");

                            b1.Property<Guid>("DenuncianteId")
                                .HasColumnType("uuid")
                                .HasColumnName("denunciante_id");

                            b1.Property<int>("Razon")
                                .HasColumnType("integer")
                                .HasColumnName("razon");

                            b1.Property<int>("Status")
                                .HasColumnType("integer")
                                .HasColumnName("status");

                            b1.HasKey("Id")
                                .HasName("pk_denuncia_de_comentario");

                            b1.HasIndex("ComentarioId")
                                .HasDatabaseName("ix_denuncia_de_comentario_comentario_id");

                            b1.HasIndex("DenuncianteId")
                                .HasDatabaseName("ix_denuncia_de_comentario_denunciante_id");

                            b1.ToTable("denuncia_de_comentario", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ComentarioId")
                                .HasConstraintName("fk_denuncia_de_comentario_comentarios_comentario_id");

                            b1.HasOne("Domain.Usuarios.Models.Usuario", null)
                                .WithMany()
                                .HasForeignKey("DenuncianteId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired()
                                .HasConstraintName("fk_denuncia_de_comentario_asp_net_users_denunciante_id");
                        });

                    b.OwnsOne("Domain.Comentarios.Models.ValueObjects.Color", "Color", b1 =>
                        {
                            b1.Property<Guid>("ComentarioId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("color");

                            b1.HasKey("ComentarioId");

                            b1.ToTable("comentarios");

                            b1.WithOwner()
                                .HasForeignKey("ComentarioId")
                                .HasConstraintName("fk_comentarios_comentarios_id");
                        });

                    b.OwnsMany("Domain.Comentarios.Models.RespuestaComentario", "Respuestas", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_at");

                            b1.Property<Guid>("RespondidoId")
                                .HasColumnType("uuid")
                                .HasColumnName("respondido_id");

                            b1.Property<Guid>("RespuestaId")
                                .HasColumnType("uuid")
                                .HasColumnName("respuesta_id");

                            b1.HasKey("Id")
                                .HasName("pk_respuesta_comentario");

                            b1.HasIndex("RespondidoId")
                                .HasDatabaseName("ix_respuesta_comentario_respondido_id");

                            b1.HasIndex("RespuestaId")
                                .HasDatabaseName("ix_respuesta_comentario_respuesta_id");

                            b1.ToTable("respuesta_comentario", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("RespondidoId")
                                .HasConstraintName("fk_respuesta_comentario_comentarios_respondido_id");

                            b1.HasOne("Domain.Comentarios.Models.Comentario", null)
                                .WithMany()
                                .HasForeignKey("RespuestaId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired()
                                .HasConstraintName("fk_respuesta_comentario_comentarios_respuesta_id");
                        });

                    b.Navigation("Color")
                        .IsRequired();

                    b.Navigation("Denuncias");

                    b.Navigation("Interaciones");

                    b.Navigation("Respuestas");
                });

            modelBuilder.Entity("Domain.Encuestas.Encuesta", b =>
                {
                    b.OwnsMany("Domain.Encuestas.Voto", "Votos", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_at");

                            b1.Property<Guid>("EncuestaId")
                                .HasColumnType("uuid")
                                .HasColumnName("encuesta_id");

                            b1.Property<Guid>("RespuestaId")
                                .HasColumnType("uuid")
                                .HasColumnName("respuesta_id");

                            b1.Property<Guid>("VotanteId")
                                .HasColumnType("uuid")
                                .HasColumnName("votante_id");

                            b1.HasKey("Id")
                                .HasName("pk_votos");

                            b1.HasIndex("EncuestaId")
                                .HasDatabaseName("ix_votos_encuesta_id");

                            b1.HasIndex("VotanteId")
                                .HasDatabaseName("ix_votos_votante_id");

                            b1.ToTable("votos", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("EncuestaId")
                                .HasConstraintName("fk_votos_encuestas_encuesta_id");

                            b1.HasOne("Domain.Usuarios.Models.Usuario", null)
                                .WithMany()
                                .HasForeignKey("VotanteId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired()
                                .HasConstraintName("fk_votos_asp_net_users_votante_id");
                        });

                    b.OwnsMany("Domain.Encuestas.Respuesta", "Respuestas", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Contenido")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("contenido");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_at");

                            b1.Property<Guid?>("encuesta_id")
                                .HasColumnType("uuid")
                                .HasColumnName("encuesta_id");

                            b1.HasKey("Id")
                                .HasName("pk_respuestas");

                            b1.HasIndex("encuesta_id")
                                .HasDatabaseName("ix_respuestas_encuesta_id");

                            b1.ToTable("respuestas", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("encuesta_id")
                                .HasConstraintName("fk_respuestas_encuestas_encuesta_id");
                        });

                    b.Navigation("Respuestas");

                    b.Navigation("Votos");
                });

            modelBuilder.Entity("Domain.Hilos.Models.Hilo", b =>
                {
                    b.HasOne("Domain.Usuarios.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_hilos_asp_net_users_autor_id");

                    b.HasOne("Domain.Encuestas.Encuesta", null)
                        .WithOne()
                        .HasForeignKey("Domain.Hilos.Models.Hilo", "EncuestaId")
                        .HasConstraintName("fk_hilos_encuestas_encuesta_id");

                    b.HasOne("Domain.Media.Models.MediaSpoileable", null)
                        .WithOne()
                        .HasForeignKey("Domain.Hilos.Models.Hilo", "PortadaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_hilos_medias_spoileables_portada_id");

                    b.HasOne("Domain.Categorias.Models.Subcategoria", null)
                        .WithMany()
                        .HasForeignKey("SubcategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_hilos_subcategorias_subcategoria_id");

                    b.OwnsMany("Domain.Hilos.Models.ComentarioDestacado", "ComentariosDestacados", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("ComentarioId")
                                .HasColumnType("uuid")
                                .HasColumnName("comentario_id");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_at");

                            b1.Property<Guid>("HiloId")
                                .HasColumnType("uuid")
                                .HasColumnName("hilo_id");

                            b1.HasKey("Id")
                                .HasName("pk_comentario_destacado");

                            b1.HasIndex("ComentarioId")
                                .HasDatabaseName("ix_comentario_destacado_comentario_id");

                            b1.HasIndex("HiloId")
                                .HasDatabaseName("ix_comentario_destacado_hilo_id");

                            b1.ToTable("comentario_destacado", (string)null);

                            b1.HasOne("Domain.Comentarios.Models.Comentario", null)
                                .WithMany()
                                .HasForeignKey("ComentarioId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired()
                                .HasConstraintName("fk_comentario_destacado_comentarios_comentario_id");

                            b1.WithOwner()
                                .HasForeignKey("HiloId")
                                .HasConstraintName("fk_comentario_destacado_hilos_hilo_id");
                        });

                    b.OwnsMany("Domain.Hilos.Models.DenunciaHilo", "Denuncias", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_at");

                            b1.Property<Guid>("DenuncianteId")
                                .HasColumnType("uuid")
                                .HasColumnName("denunciante_id");

                            b1.Property<Guid>("HiloId")
                                .HasColumnType("uuid")
                                .HasColumnName("hilo_id");

                            b1.Property<int>("Razon")
                                .HasColumnType("integer")
                                .HasColumnName("razon");

                            b1.Property<int>("Status")
                                .HasColumnType("integer")
                                .HasColumnName("status");

                            b1.HasKey("Id")
                                .HasName("pk_denuncia_hilo");

                            b1.HasIndex("DenuncianteId")
                                .HasDatabaseName("ix_denuncia_hilo_denunciante_id");

                            b1.HasIndex("HiloId")
                                .HasDatabaseName("ix_denuncia_hilo_hilo_id");

                            b1.ToTable("denuncia_hilo", (string)null);

                            b1.HasOne("Domain.Usuarios.Models.Usuario", null)
                                .WithMany()
                                .HasForeignKey("DenuncianteId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired()
                                .HasConstraintName("fk_denuncia_hilo_asp_net_users_denunciante_id");

                            b1.WithOwner()
                                .HasForeignKey("HiloId")
                                .HasConstraintName("fk_denuncia_hilo_hilos_hilo_id");
                        });

                    b.OwnsMany("Domain.Hilos.Models.HiloInteraccion", "Interacciones", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_at");

                            b1.Property<bool>("Favorito")
                                .HasColumnType("boolean")
                                .HasColumnName("favorito");

                            b1.Property<Guid>("HiloId")
                                .HasColumnType("uuid")
                                .HasColumnName("hilo_id");

                            b1.Property<bool>("Oculto")
                                .HasColumnType("boolean")
                                .HasColumnName("oculto");

                            b1.Property<bool>("Seguido")
                                .HasColumnType("boolean")
                                .HasColumnName("seguido");

                            b1.Property<Guid>("UsuarioId")
                                .HasColumnType("uuid")
                                .HasColumnName("usuario_id");

                            b1.HasKey("Id")
                                .HasName("pk_hilo_interacciones");

                            b1.HasIndex("HiloId")
                                .HasDatabaseName("ix_hilo_interacciones_hilo_id");

                            b1.HasIndex("UsuarioId")
                                .HasDatabaseName("ix_hilo_interacciones_usuario_id");

                            b1.ToTable("hilo_interacciones", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("HiloId")
                                .HasConstraintName("fk_hilo_interacciones_hilos_hilo_id");

                            b1.HasOne("Domain.Usuarios.Models.Usuario", null)
                                .WithMany()
                                .HasForeignKey("UsuarioId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired()
                                .HasConstraintName("fk_hilo_interacciones_asp_net_users_usuario_id");
                        });

                    b.OwnsOne("Domain.Hilos.Models.Sticky", "Sticky", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_at");

                            b1.Property<Guid>("HiloId")
                                .HasColumnType("uuid")
                                .HasColumnName("hilo_id");

                            b1.HasKey("Id")
                                .HasName("pk_stickies");

                            b1.HasIndex("HiloId")
                                .IsUnique()
                                .HasDatabaseName("ix_stickies_hilo_id");

                            b1.ToTable("stickies", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("HiloId")
                                .HasConstraintName("fk_stickies_hilos_hilo_id");
                        });

                    b.OwnsOne("Domain.Hilos.Models.ValueObjects.ConfiguracionDeComentarios", "Configuracion", b1 =>
                        {
                            b1.Property<Guid>("HiloId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<bool>("DadosActivado")
                                .HasColumnType("boolean")
                                .HasColumnName("dados_activado");

                            b1.Property<bool>("IdUnicoActivado")
                                .HasColumnType("boolean")
                                .HasColumnName("id_unico_activado");

                            b1.HasKey("HiloId");

                            b1.ToTable("hilos");

                            b1.WithOwner()
                                .HasForeignKey("HiloId")
                                .HasConstraintName("fk_hilos_hilos_id");
                        });

                    b.Navigation("ComentariosDestacados");

                    b.Navigation("Configuracion")
                        .IsRequired();

                    b.Navigation("Denuncias");

                    b.Navigation("Interacciones");

                    b.Navigation("Sticky");
                });

            modelBuilder.Entity("Domain.Media.Models.HashedMedia", b =>
                {
                    b.OwnsOne("Domain.Media.Models.Media", "Media", b1 =>
                        {
                            b1.Property<Guid>("HashedMediaId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Miniatura")
                                .HasColumnType("text")
                                .HasColumnName("miniatura");

                            b1.Property<string>("Previsualizacion")
                                .HasColumnType("text")
                                .HasColumnName("previsualizacion");

                            b1.HasKey("HashedMediaId");

                            b1.ToTable("medias");

                            b1.WithOwner()
                                .HasForeignKey("HashedMediaId")
                                .HasConstraintName("fk_medias_medias_id");

                            b1.OwnsOne("Domain.Media.Models.MediaProvider", "Provider", b2 =>
                                {
                                    b2.Property<Guid>("MediaHashedMediaId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("id");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("provider");

                                    b2.HasKey("MediaHashedMediaId");

                                    b2.ToTable("medias");

                                    b2.WithOwner()
                                        .HasForeignKey("MediaHashedMediaId")
                                        .HasConstraintName("fk_medias_medias_id");
                                });

                            b1.Navigation("Provider")
                                .IsRequired();
                        });

                    b.Navigation("Media")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Media.Models.MediaSpoileable", b =>
                {
                    b.HasOne("Domain.Media.Models.HashedMedia", "HashedMedia")
                        .WithMany()
                        .HasForeignKey("HashedMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_medias_spoileables_medias_hashed_media_id");

                    b.Navigation("HashedMedia");
                });

            modelBuilder.Entity("Domain.Notificaciones.Notificacion", b =>
                {
                    b.HasOne("Domain.Comentarios.Models.Comentario", null)
                        .WithMany()
                        .HasForeignKey("ComentarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notificaciones_comentarios_comentario_id");

                    b.HasOne("Domain.Hilos.Models.Hilo", null)
                        .WithMany("Notificaciones")
                        .HasForeignKey("HiloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notificaciones_hilos_hilo_id");

                    b.HasOne("Domain.Usuarios.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("NotificadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notificaciones_asp_net_users_notificado_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<Domain.Usuarios.Models.ValueObjects.IdentityId>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<Domain.Usuarios.Models.ValueObjects.IdentityId>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<Domain.Usuarios.Models.ValueObjects.IdentityId>", b =>
                {
                    b.HasOne("Domain.Usuarios.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<Domain.Usuarios.Models.ValueObjects.IdentityId>", b =>
                {
                    b.HasOne("Domain.Usuarios.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<Domain.Usuarios.Models.ValueObjects.IdentityId>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<Domain.Usuarios.Models.ValueObjects.IdentityId>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("Domain.Usuarios.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<Domain.Usuarios.Models.ValueObjects.IdentityId>", b =>
                {
                    b.HasOne("Domain.Usuarios.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("Domain.Notificaciones.ComentarioRespondidoNotificacion", b =>
                {
                    b.HasOne("Domain.Comentarios.Models.Comentario", null)
                        .WithMany()
                        .HasForeignKey("RespondidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notificaciones_comentarios_respondido_id");
                });

            modelBuilder.Entity("Domain.Categorias.Models.Categoria", b =>
                {
                    b.Navigation("Subcategorias");
                });

            modelBuilder.Entity("Domain.Hilos.Models.Hilo", b =>
                {
                    b.Navigation("Comentarios");

                    b.Navigation("Notificaciones");
                });
#pragma warning restore 612, 618
        }
    }
}
